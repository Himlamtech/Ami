---
alwaysApply: true
---
## 🛠️ Tech Stack

### **Backend**
- **Framework**: FastAPI (Python 3.12)
- **Architecture**: Clean Architecture + SOLID principles
- **API**: RESTful API with OpenAPI/Swagger docs

### **Frontend**
- **Framework**: React 18 + TypeScript
- **Build Tool**: Vite
- **State Management**: Zustand
- **HTTP Client**: Axios
- **Icons**: Lucide React
- **Styling**: Custom CSS (Charter font)

### **AI/ML Models**
- **LLM Provider**: OpenAI
  - Fast Mode: `gpt-4.1-nano`
  - Balance Mode: `gpt-4.1-mini`
  - Thinking Mode: `o4-mini`
- **Embeddings**: HuggingFace
  - Model: `dangvantuan/vietnamese-document-embedding`
- **Image Generation**: gpt-5-nano
- **Vision Analysis**: gpt-5-nano

### **Databases**
- **Vector Database**: Qdrant (semantic search)
- **Document Database**: MongoDB (users, metadata, chat history)
- **Cache**: Redis (response caching, TTL: 3600s)
- **File Storage**: MinIO (S3-compatible object storage)

### **External APIs**
- **OpenAI API**: LLM, image generation
- **Firecrawl API**: Web scraping and crawling
- **HuggingFace**: Vietnamese text embeddings

### **Document Processing**
- **Library**: MarkItDown (Microsoft)
- **Supported Formats**: PDF, DOCX, TXT, MD, CSV, JSON, HTML
---

## 🏗️ Infrastructure

### **Architecture Pattern**
```
┌─────────────────────────────────────────┐
│           Frontend (React)              │
│         Port: 6009 (Dev/Prod)           │
└─────────────────┬───────────────────────┘
                  │ HTTP/REST
┌─────────────────▼───────────────────────┐
│         Backend (FastAPI)               │
│            Port: 6008                   │
└─────┬───────┬───────┬──────────┬────────┘
      │       │       │          │
┌─────▼──┐ ┌──▼───┐ ┌▼──────┐ ┌─▼──────┐
│ Qdrant │ │MongoDB│ │ Redis │ │ MinIO  │
│  6333  │ │ 27017 │ │ 6379  │ │  9000  │
└────────┘ └───────┘ └───────┘ └────────┘
```

### **Ports**
- **Frontend**: `6009` (Vite dev server)
- **Backend**: `6008` (FastAPI/Uvicorn)
- **MongoDB**: `27017`
- **Redis**: `6379`
- **Qdrant**: `6333` (HTTP), `6334` (gRPC)
- **MinIO**: `9000` (API), `9001` (Console)

### **Authentication**
- **Method**: JWT (JSON Web Tokens)
- **Algorithm**: HS256
- **Token Expiry**: 1440 minutes (24 hours)
- **Protected Routes**: All except login

### **CORS Configuration**
- Allowed Origins: `localhost:6009`, `localhost:6010`, `localhost:6008`
- Methods: GET, POST, PUT, DELETE, OPTIONS
- Headers: Authorization, Content-Type

---

### **Docker Configuration**
- **Base Image**: `python:3.12-slim`
- **Multi-stage Build**: Yes (builder + production)
- **Health Check**: `/api/v1/config/health` (30s interval)
- **Non-root User**: `ami` (UID: 1000)

### **Environment Variables**
```env
# OpenAI
OPENAI_API_KEY=sk-...

# Firecrawl
FIRECRAWL_API_KEY=fc-...

# MongoDB
MONGO_USER=admin
MONGO_PASSWORD=***
MONGO_DB=ami_db

# JWT
JWT_SECRET_KEY=***

# MinIO
MINIO_ACCESS_KEY=admin
MINIO_SECRET_KEY=***
```

---

---

## 🔧 API Endpoints

### **Authentication**
- `POST /api/v1/auth/login` - User login
- `POST /api/v1/auth/register` - User registration (admin only)
- `GET /api/v1/auth/me` - Get current user

### **Chat**
- `POST /api/v1/generate/chat` - Generate chat response
- `GET /api/v1/chat-history/sessions` - List chat sessions
- `POST /api/v1/chat-history/sessions` - Create session
- `GET /api/v1/chat-history/sessions/{id}` - Get session details
- `DELETE /api/v1/chat-history/sessions/{id}` - Delete session

### **Data Management**
- `POST /api/v1/vectordb/ingest` - Ingest documents
- `POST /api/v1/vectordb/upload` - Upload files
- `POST /api/v1/crawl/scrape` - Scrape single page
- `POST /api/v1/crawl/crawl` - Crawl multiple pages
- `GET /api/v1/vectordb/stats` - Get database statistics
- `GET /api/v1/vectordb/collections` - List collections

### **Configuration**
- `GET /api/v1/config/health` - Health check
- `GET /api/v1/config/models` - List available models

---